@startuml
namespace database {
    interface DynamoDBDatabase  {
        + CreateIfNotExist( *model.Ocean) error

    }
    class DynamoDBDatabaseImpl << (S,Aquamarine) >> {
        - tableName string
        - dynamoDB *dynamodb.DynamoDB

        + CreateIfNotExist(ocean *model.Ocean) error

    }
}

"database.DynamoDBDatabase" <|-- "database.DynamoDBDatabaseImpl"
"service.DynamoDBDatabase" <|-- "database.DynamoDBDatabaseImpl"

namespace iop {
    class FetchServiceImpl << (S,Aquamarine) >> {
        - logging *logging.OceanLoggingImpl
        - name string
        - url string
        - queryTemperature string
        - queryVisibility string
        - queryMeasuredTime string

        - fetchDocument(url string) (*goquery.Document, error)
        - fetchTemperature(query string, doc *goquery.Document, ocean *model.Ocean) error
        - fetchVisibility(query string, doc *goquery.Document, ocean *model.Ocean) error
        - fetchMeasuredTime(query string, doc *goquery.Document, ocean *model.Ocean) error

        + Fetch() (*model.Ocean, error)

    }
}

"service.FetchService" <|-- "iop.FetchServiceImpl"

namespace logging {
    interface OceanLogging  {
        + Info(message ...string) 
        + Info(message ...string) 

    }
    class OceanLoggingImpl << (S,Aquamarine) >> {
        - requestID string
        - requestID string

        + Info(message ...string) 
        + Info(message ...string) 

    }
}

"logging.OceanLogging" <|-- "logging.OceanLoggingImpl"

namespace model {
    class Ocean << (S,Aquamarine) >> {
        + LocationName string
        + URL string
        + Temperature Temperature
        + Visibility Visibility
        + MeasuredTime time.Time
        + LocationName string
        + URL string
        + Temperature Temperature
        + Visibility Visibility
        + MeasuredTime time.Time

    }
    class Temperature << (S,Aquamarine) >> {
        + Min int
        + Med int
        + Max int
        + Min int
        + Med int
        + Max int

    }
    class Visibility << (S,Aquamarine) >> {
        + Min int
        + Med int
        + Max int
        + Min int
        + Med int
        + Max int

    }
}


namespace repository {
    interface OceanRepository  {
        + Store(ocean *model.Ocean) error

    }
    class OceanRepositoryImpl << (S,Aquamarine) >> {
        - logging *logging.OceanLoggingImpl
        - db *database.DynamoDBDatabaseImpl

        + Store(ocean *model.Ocean) error

    }
}

"repository.OceanRepository" <|-- "repository.OceanRepositoryImpl"

namespace service {
    interface DynamoDBDatabase  {
        + CreateIfNotExist( *model.Ocean) error

    }
    class DynamoDBDatabaseImpl << (S,Aquamarine) >> {
        - tableName string
        - dynamoDB *dynamodb.DynamoDB
        - logging *logging.OceanLoggingImpl

        + FetchLatestOcean(locationName string) (*model.Ocean, error)
        + FetchAllLatestOceans() ([]*model.Ocean, error)

    }
    interface FetchService  {
        - fetchDocument(url string) (*goquery.Document, error)

        + Fetch() (*model.Ocean, error)

    }
}


namespace tiba {
    class FetchServiceUkishimaTibaImpl << (S,Aquamarine) >> {
        - logging *logging.OceanLoggingImpl
        - name string
        - url string
        - queryArticle string
        - queryMeasuredTime string

        - fetchDocument(url string, ocean *model.Ocean) (*goquery.Document, error)
        - fetchTemperature(query string, doc *goquery.Document, ocean *model.Ocean) error
        - fetchVisibility(query string, doc *goquery.Document, ocean *model.Ocean) error
        - fetchMeasuredTime(query string, doc *goquery.Document, ocean *model.Ocean) error

        + Fetch() (*model.Ocean, error)

    }
}


namespace ukishima {
    class FetchServiceImpl << (S,Aquamarine) >> {
        - logging *logging.OceanLoggingImpl
        - name string
        - url string
        - queryArticle string
        - queryDate string

        - fetchDocument(url string, ocean *model.Ocean) (*goquery.Document, error)
        - fetchTemperature(query string, doc *goquery.Document, ocean *model.Ocean) error
        - fetchVisibility(query string, doc *goquery.Document, ocean *model.Ocean) error
        - fetchMeasuredTime(query string, doc *goquery.Document, ocean *model.Ocean) error

        + Fetch() (*model.Ocean, error)

    }
}


@enduml
